---
- name: List hosts in ESXi
  ansible.builtin.debug:
    msg: "Host: {{ item }}"
  loop: "{{ groups['esxi'] }}"

- name: List hosts in VC
  ansible.builtin.debug:
    msg: "Host: {{ item.server }}"
  loop: "{{ vcenters }}"

- name: Set vc name
  ansible.builtin.set_fact:
    host_fact_hostname: "{{ vcenter.server }}"

- name: Setting host facts
  ansible.builtin.set_fact:
    vmkguest: "vmkernel8Guest"
  when: '"8" in version'

- name: Setting host facts
  ansible.builtin.set_fact:
    vmkguest: "vmkernel7Guest"
  when: '"7" in version'

- name: VC Exists
  block:
    - name: "DELETE virtual machine {{ host_fact_hostname }} version {{ version }}"
      community.vmware.vmware_guest:
        datacenter: "{{ vc_datacenter }}"
        folder: "{{ vc_datacenter }}/vm/{{ vc_folder }}"
        name: "{{ host_fact_hostname }}"
        state: absent
        force: true
      when: testingvc | bool

    - name: "Does VC virtual machine {{ host_fact_hostname }} exist"
      community.vmware.vmware_guest:
        datacenter: "{{ vc_datacenter }}"
        folder: "{{ vc_datacenter }}/vm/{{ vc_folder }}"
        name: "{{ host_fact_hostname }}"
        state: present

    - name: "Does VC virtual machine {{ host_fact_hostname }} exist get ip"
      community.vmware.vmware_guest_info:
        datacenter: "{{ vc_datacenter }}"
        name: "{{ host_fact_hostname }}"
        schema: vsphere
        properties:
          - guest.ipAddress
      register: nested_vm

    - name: Show ip address
      ansible.builtin.debug:
        msg: "ip is: {{ nested_vm.instance.guest.ipAddress }}"

    - name: Wait for vCenter
      community.vmware.vmware_about_info:
        hostname: '{{ nested_vm.instance.guest.ipAddress }}'
        username: 'administrator@{{ vc_fact_domain }}'
        password: "{{ vc_fact_password }}"
        validate_certs: false
      retries: 30
      delay: 60
      register: result
      until: result is succeeded

    - name: Add host to group vc
      ansible.builtin.add_host:
        name: '{{ host_fact_hostname }}'
        groups: vc
        NESTEDVMIP: "{{ nested_vm.instance.guest.ipAddress }}"
  rescue:
    - name: Deploy VM from Content Library
      vmware.vmware.deploy_content_library_ovf:
        library_name: "nested"
        library_item_name: "{{ vcenterova | split('.ova') | first }}"
        vm_name: "{{ host_fact_hostname }}"
        datacenter: "{{ vc_datacenter }}"
        cluster: "{{ vc_cluster | split('/') | last }}"
        datastore: "{{ vc_datastore | split('/') | last }}"
        folder: "{{ vc_folder }}"
      register: nested_vm

    - name: add and enable guest networks
      community.vmware.vmware_guest_network:
        datacenter: "{{ vc_datacenter }}"
        name: "{{ host_fact_hostname }}"
        state: present
        network_name: "{{ item.network_name | default(omit) }}"
        connected: "{{ item.connected | default(omit) }}"
        label:  "{{ item.label | default(omit) }}"
        device_type: vmxnet3
      loop:
        - network_name: "{{ vc_fact_deployment_network }}"
          connected: true
          label: "Network adapter 1"

    - community.vmware.vmware_guest:
        name: "{{ host_fact_hostname }}"
        vapp_properties:
          - id: DeploymentOption.value
            value: 'tiny' # vCenter t-shirt size: tiny,small,medium,large, or infrastructure
            userConfigurable: true
          - id: guestinfo.cis.appliance.net.addr.family
            value: 'ipv4' # ipv4 or ipv6
            userConfigurable: true
          - id: guestinfo.cis.appliance.net.mode
            value: 'dhcp' # static or dhcp
            userConfigurable: true
          - id: guestinfo.cis.appliance.root.passwd
            value: "{{ vc_fact_password }}"
            userConfigurable: true
          - id: guestinfo.cis.vmdir.password
            value: "{{ vc_fact_password }}" # SSO Password for administrator@vsphere.local
          - id: domain
            value: "{{ vc_fact_domain }}"
            userConfigurable: true
          - id: guestinfo.cis.deployment.autoconfig
            value: 'True' # Auto-configure after deployment
            userConfigurable: true
          - id: guestinfo.cis.appliance.root.shell
            value: 'True'
            userConfigurable: true
          - id: guestinfo.cis.appliance.ssh.enabled
            value: 'True'
            userConfigurable: true
      register: nested_vm

    - community.vmware.vmware_guest:
        name: "{{ host_fact_hostname }}"
        state: poweredon
        wait_for_ip_address: true
        wait_for_ip_address_timeout: 1200
      register: nested_vm


    - name: "Does VC virtual machineexist get ip {{ host_fact_hostname }}"
      community.vmware.vmware_guest_info:
        datacenter: "{{ vc_datacenter }}"
        name: "{{ host_fact_hostname }}"
        schema: vsphere
        properties:
          - guest.ipAddress
      register: nested_vm
      until: nested_vm.instance.guest.ipAddress != None
      retries: 10
      delay: 30

    - name: Add host to group vc
      ansible.builtin.add_host:
        name: '{{ host_fact_hostname }}'
        groups: vc
        NESTEDVMIP: "{{ nested_vm.instance.guest.ipAddress }}"

    - name: Show ip
      ansible.builtin.debug:
        msg: "ip is: {{ nested_vm.instance }}"

    - name: Wait for vCenter
      vmware_about_info:
        hostname: "{{ hostvars[groups['vc'][vcenter_idx]].NESTEDVMIP }}"
        username: 'administrator@{{ vc_fact_domain }}'
        password: "{{ vc_fact_password }}"
        validate_certs: false
      retries: 30
      delay: 60
      register: result
      until: result is succeeded

    - name: "Wait for {{ hostvars[groups['vc'][vcenter_idx]].inventory_hostname }} {{ nested_vm.instance.guest.ipAddress }} install of VC on host to be complete"
      ansible.builtin.wait_for:
        host: "{{ nested_vm.instance.guest.ipAddress }}"
        port: 443
        sleep: 10
        timeout: 900
